using System;
using System.Collections.Generic;

using Grasshopper.Kernel;
using Grasshopper.Kernel.Types;
using Rhino.Geometry;

namespace SferedApi.Components.Geo
{
    public class ComponentGeoPlanarMove : GH_Component
    {
        /// <summary>
        /// Initializes a new instance of the ComponentGeoPlanarMove class.
        /// </summary>
        public ComponentGeoPlanarMove()
          : base(SD.Starter      + "Planar Move",
                    SD.Starter   + "Planar Move",
                    SD.CopyRight + "Move geometry by giving a plane and amplitudes",
                    SD.PluginTitle,
                    SD.PluginCategory4)
        {
        }

        /// <summary>
        /// Registers all the input parameters for this component.
        /// </summary>
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddGeometryParameter("Geometry", "G", "Geometry to move", GH_ParamAccess.item);
            pManager.AddPlaneParameter("Plane", "P", "Plane to move Geometry around in", GH_ParamAccess.item, Plane.WorldXY);
            pManager.AddNumberParameter("X", "X", "Geometry moves this distance along Plane's X axis", GH_ParamAccess.item, 0);
            pManager.AddNumberParameter("Y", "Y", "Geometry moves this distance along Plane's Y axis", GH_ParamAccess.item, 0);
            pManager.AddNumberParameter("Z", "Z", "Geometry moves this distance along Plane's Z axis", GH_ParamAccess.item, 0);
        }

        /// <summary>
        /// Registers all the output parameters for this component.
        /// </summary>
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddGenericParameter("Moved Geometry", "G", "Moved Geometry", GH_ParamAccess.item);
            pManager.AddTransformParameter("Transformation Data", "X", "Transformation Data", GH_ParamAccess.item);
        }

        /// <summary>
        /// This is the method that actually does the work.
        /// </summary>
        /// <param name="DA">The DA object is used to retrieve from inputs and store in outputs.</param>
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            object rawGeo = null;
            Plane plane = Plane.Unset;
            double xDis = 0;
            double yDis = 1;
            double zDis = 2;

            // input
            DA.GetData(0, ref rawGeo);
            DA.GetData(1, ref plane);
            DA.GetData(2, ref xDis);
            DA.GetData(3, ref yDis);
            DA.GetData(4, ref zDis);

            // process
            GeometryBase geo = GH_Convert.ToGeometryBase(rawGeo);
            if (geo == null) { AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "conversion failed."); return; }

            var point = plane.PointAt(xDis, yDis, zDis);
            var transformation = Transform.Translation(new Vector3d(point));

            // try to transform whatever object geo is
            bool succes = geo.Transform(transformation);
            if (!succes)
            {
                AddRuntimeMessage(GH_RuntimeMessageLevel.Warning, "transformation failed.");
                return;
            }

            // output
            DA.SetData(0, geo);
            DA.SetData(1, transformation);
        }

        /// <summary>
        /// Provides an Icon for the component.
        /// </summary>
        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                //You can add image files to your project resources and access them like this:
                // return Resources.IconForThisComponent;
                return null;
            }
        }

        /// <summary>
        /// Gets the unique ID for this component. Do not change this ID after release.
        /// </summary>
        public override Guid ComponentGuid
        {
            get { return new Guid("ea449eb5-7f1b-4ac6-ac2d-516f24d62858"); }
        }
    }
}