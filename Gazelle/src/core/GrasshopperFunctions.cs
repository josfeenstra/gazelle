// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace SferedApi
{
    using Grasshopper;
    using Grasshopper.Kernel.Data;
    using Grasshopper.Kernel.Types;
    using Rhino.Geometry;
    using System;
    using System.Collections.Generic;
    
    public static class GrasshopperFunctions
    {
        public static Curve LineCurve(Point3d from, Point3d to)
        {
            Rhino.Geometry.LineCurve curve1 = new Rhino.Geometry.LineCurve(from, to);
            curve1.set_Domain(new Interval(0.0, 1.0));
            return curve1;
        }
        
        public static List<int> NotList(List<int> original, List<int> items)
        {
            List<int> list = new List<int>();
            foreach (int num in original)
            {
                if (!items.Contains(num))
                {
                    list.Add(num);
                }
            }
            return list;
        }
        
        public static DataTree<T> ToTree<T>(IEnumerable<IEnumerable<T>> listOfLists)
        {
            DataTree<T> tree = new DataTree<T>();
            int num = 0;
            foreach (IEnumerable<T> enumerable in listOfLists)
            {
                GH_Path path = new GH_Path(num);
                foreach (T local in enumerable)
                {
                    tree.Add(local, path);
                }
                num++;
            }
            return tree;
        }
        
        public static object ValueFromGoo(IGH_Goo goo)
        {
            object obj2;
            switch (goo)
            {
                case (null):
                    obj2 = null;
                    break;
                
                case (GH_String _):
                    obj2 = (goo as GH_String).get_Value();
                    break;
                
                case (GH_Integer _):
                    obj2 = (goo as GH_Integer).get_Value();
                    break;
                
                case (GH_Number _):
                    obj2 = (goo as GH_Number).get_Value();
                    break;
                
                case (GH_Point _):
                    obj2 = (goo as GH_Point).get_Value();
                    break;
                
                case (GH_Curve _):
                    obj2 = (goo as GH_Curve).get_Value().DuplicateCurve();
                    break;
                
                case (GH_Surface _):
                    obj2 = (goo as GH_Surface).get_Value().DuplicateBrep();
                    break;
                
                case (GH_Brep _):
                    break;
                
                default:
                    throw new Exception("IGH_Goo not recognized");
                    break;
            }
            return obj2;
        }
        
        public static object ValueFromGoo(object goo) => 
            ValueFromGoo(goo as IGH_Goo);
    }
}
