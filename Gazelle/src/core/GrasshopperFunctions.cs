// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
using Grasshopper;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;
using Rhino.Geometry;
using System;
using System.Collections.Generic;

namespace Gazelle
{  
    public static class GrasshopperFunctions
    {
        public static Curve LineCurve(Point3d from, Point3d to)
        {
            Rhino.Geometry.LineCurve curve1 = new LineCurve(from, to);
            curve1.Domain = new Interval(0.0, 1.0);
            return curve1;
        }
        
        public static List<int> NotList(List<int> original, List<int> items)
        {
            List<int> list = new List<int>();
            foreach (int num in original)
            {
                if (!items.Contains(num))
                {
                    list.Add(num);
                }
            }
            return list;
        }
        
        public static DataTree<T> ToTree<T>(IEnumerable<IEnumerable<T>> listOfLists)
        {
            DataTree<T> tree = new DataTree<T>();
            int num = 0;
            foreach (IEnumerable<T> enumerable in listOfLists)
            {
                GH_Path path = new GH_Path(num);
                foreach (T local in enumerable)
                {
                    tree.Add(local, path);
                }
                num++;
            }
            return tree;
        }
        
        public static object ValueFromGoo(IGH_Goo goo)
        {
            switch (goo)
            {
                case (null):
                    return null;
                
                case GH_String val:
                    return val.Value;
                case GH_Integer val:
                    return val.Value;
                case GH_Number val:
                    return val.Value;

                case GH_Point val:
                    return val.Value;
                case GH_Vector val:
                    return val.Value;

                case GH_Curve val:
                    return val.Value;
                case GH_Surface val:
                    return val.Value;
                case GH_Brep val:
                    return val.Value;

                default:
                    throw new InvalidOperationException("IGH_Goo not recognized");
            }
        }
        
        public static object ValueFromGoo(object goo) => 
            ValueFromGoo(goo as IGH_Goo);
    }
}
