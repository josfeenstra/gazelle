// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace SferedApi
{
    using Grasshopper.Kernel.Types;
    using Rhino.Geometry;
    using System;
    using System.Collections.Generic;
    
    internal class FontCustomCharacter
    {
        private static int CurveListStartIndex = 10;
        public char Character;
        public Rhino.Geometry.Plane Plane;
        public double Width;
        public double Height;
        public List<Curve> CurveList;
        
        public FontCustomCharacter(List<IGH_Goo> list)
        {
            this.Character = (list[0] as GH_String).Value[0];
            this.Plane = (list[1] as GH_Plane).Value;
            this.Width = (list[2] as GH_Number).Value;
            this.Height = (list[3] as GH_Number).Value;
            this.CurveList = new List<Curve>();
            if (CurveListStartIndex < list.Count)
            {
                int curveListStartIndex = CurveListStartIndex;
                while (true)
                {
                    if (curveListStartIndex >= list.Count)
                    {
                        break;
                    }
                    this.CurveList.Add((list[curveListStartIndex] as GH_Curve).Value.DuplicateCurve());
                    curveListStartIndex++;
                }
            }
        }
        
        public FontCustomCharacter(List<object> list)
        {
            this.Character = (list[0] as string)[0];
            this.Plane = (Rhino.Geometry.Plane) list[1];
            this.Width = (double) list[2];
            this.Height = (double) list[3];
            this.CurveList = new List<Curve>();
            for (int i = CurveListStartIndex; i < list.Count; i++)
            {
                this.CurveList.Add((list[i] as Curve).DuplicateCurve());
            }
        }
        
        public FontCustomCharacter(char character, List<Curve> curveList, Rhino.Geometry.Plane plane, double width, double height)
        {
            this.Character = character;
            this.Plane = plane;
            this.Width = width;
            this.Height = height;
            this.CurveList = curveList;
        }
        
        public FontCustomCharacter Duplicate() => 
            new FontCustomCharacter(this.GetDataList());
        
        public List<object> GetDataList()
        {
            List<object> list1 = new List<object>();
            list1.Add(this.Character.ToString());
            list1.Add(this.Plane);
            list1.Add(this.Width);
            list1.Add(this.Height);
            list1.Add(null);
            list1.Add(null);
            list1.Add(null);
            list1.Add(null);
            list1.Add(null);
            list1.Add(null);
            List<object> list = list1;
            foreach (Curve curve in this.CurveList)
            {
                list.Add(curve);
            }
            return list;
        }
        
        public string print()
        {
            string[] textArray1 = new string[] { this.Character.ToString(), this.Plane.ToString(), this.Width.ToString(), this.Height.ToString(), this.CurveList.ToString() };
            return string.Concat(textArray1);
        }
    }
}
