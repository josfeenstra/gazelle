// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace Gazelle
{
    using Grasshopper.Kernel;
    using Rhino.Geometry;
    using Gazelle.Properties;
    using System;
    using System.Drawing;
    
    public class Extrude : GH_Component
    {
        public Extrude() : base(SD.Starter + "Extrude Brep", SD.Starter + "Extr", SD.CopyRight + "Extrude a Brep", SD.PluginTitle, SD.PluginCategory8)
        {
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "", (GH_ParamAccess)0);
            pManager.AddVectorParameter("Vector", "V", "direction and distance of extrution", (GH_ParamAccess)0);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "Extruded brep", (GH_ParamAccess)0);
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep brep = null;
            Vector3d direction = Vector3d.Unset;
            DA.GetData<Brep>(0, ref brep);
            DA.GetData<Vector3d>(1, ref direction);
            if ((brep == null) || (direction == Vector3d.Unset))
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)20, "input bad");
            }
            else
            {
                brep.ExtrudeNoCap(direction);
                DA.SetData(0, brep);
            }
        }
        
        protected override Bitmap Icon =>
            Resources.Sfered_Iconified;
        
        public override Guid ComponentGuid =>
            new Guid("66b771c9-8468-4ee9-beef-9597f33cd15f");
    }
}
