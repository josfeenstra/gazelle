// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace Gazelle.Components
{
    using Grasshopper.Kernel;
    using Rhino.Geometry;
    using Gazelle;
    using Gazelle.Properties;
    using System;
    using System.Collections.Generic;
    using System.Drawing;
    
    public class EmbedCurvesToFace : GH_Component
    {
        public EmbedCurvesToFace() : base(SD.Starter + "Embed Curves To Face", SD.Starter + "Embed Face", SD.CopyRight, SD.PluginTitle, SD.PluginCategory8)
        {
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "", (GH_ParamAccess)0);
            pManager.AddCurveParameter("Curves", "C", "Curves to embed", (GH_ParamAccess)1);
            pManager.AddIntegerParameter("Face", "Fi", "", (GH_ParamAccess)0);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "", (GH_ParamAccess)0);
            pManager.AddIntegerParameter("Inner Face Indices", "In", "", (GH_ParamAccess)1);
            pManager.AddIntegerParameter("Outer Face Indices", "Out", "", (GH_ParamAccess)1);
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep brep = null;
            List<Curve> curves = new List<Curve>();
            DA.GetData<Brep>(0, ref brep);
            DA.GetDataList<Curve>(1, curves);
            if (brep != null)
            {
                List<List<int>> list2;
                List<int> list3;
                using (List<Curve>.Enumerator enumerator = curves.GetEnumerator())
                {
                    while (true)
                    {
                        if (!enumerator.MoveNext())
                        {
                            break;
                        }
                        Curve current = enumerator.Current;
                        if (((current == null) || !current.IsValid) || !current.IsClosed)
                        {
                            this.AddRuntimeMessage((GH_RuntimeMessageLevel)20, "curve is invalid, missing, or not closed.");
                            return;
                        }
                    }
                }
                BrepFunctions.EmbedCurves(ref brep, curves, out list2, out list3);
                DA.SetData(0, brep);
                DA.SetDataTree(1, GrasshopperFunctions.ToTree<int>((IEnumerable<IEnumerable<int>>) list2));
                DA.SetDataList(2, list3);
            }
            else
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)20, "input bad");
            }
        }
        
        protected override Bitmap Icon =>
            Resources.Sfered_Iconified;
        
        public override Guid ComponentGuid =>
            new Guid("c2cadada-16aa-4895-be76-c029ac73b4a3");
    }
}
