// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace Gazelle
{
    using Grasshopper.Kernel;
    using Rhino.Geometry;
    using Gazelle.Properties;
    using System;
    using System.Drawing;
    
    public class DeconstructTrim : GH_Component
    {
        public DeconstructTrim() : base(SD.Starter + "Deconstruct Trim", "DeTrim", SD.CopyRight + "Deconstruct A BrepTrim of a Brep", SD.PluginTitle, SD.PluginCategory7)
        {
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "Brep", (GH_ParamAccess)0);
            pManager.AddIntegerParameter("Int", "Ti", "index of trim", (GH_ParamAccess)0, 0);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddCurveParameter("Curve", "C", "the 2d curve of the trim", (GH_ParamAccess)0);
            pManager.AddBooleanParameter("IsReversed", "R", "orientation of the curve regarding the Edge", (GH_ParamAccess)0);
            pManager.AddBooleanParameter("proxycurveisreversed", "R", "orientation of the curve", (GH_ParamAccess)0);
            pManager.AddTextParameter("IsoStatus", "Is", "the isostatus", (GH_ParamAccess)0);
            pManager.AddTextParameter("TrimType", "Tt", "the type of trim this is", (GH_ParamAccess)0);
            pManager.AddIntegerParameter("Edge Index", "Ei", "the edge this trim links to", (GH_ParamAccess)0);
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep brep = null;
            int num = -1;
            DA.GetData<Brep>(0, ref brep);
            DA.GetData<int>(1, ref num);
            if (brep == null)
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)20, "Input bad");
            }
            else if ((num < 0) || (num >= brep.Trims.Count))
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)10, "out of range");
            }
            else
            {
                BrepTrim trim = brep.Trims[num];
                DA.SetData(0, trim.DuplicateCurve());
                DA.SetData(1, trim.IsReversed());
                DA.SetData(2, trim.ProxyCurveIsReversed);
                DA.SetData(3, trim.IsoStatus.ToString());
                DA.SetData(4, trim.TrimType.ToString());
                DA.SetData(5, trim.Edge.EdgeIndex);
            }
        }
        
        protected override Bitmap Icon =>
            Resources.Sfered_Iconified;
        
        public override Guid ComponentGuid =>
            new Guid("194caa80-099c-4ff8-a841-f7657ed49d24");
    }
}
