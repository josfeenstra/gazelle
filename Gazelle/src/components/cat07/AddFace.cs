// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace Gazelle
{
    using Grasshopper.Kernel;
    using Rhino.Geometry;
    using Gazelle.Properties;
    using System;
    using System.Drawing;
    
    public class AddFace : GH_Component
    {
        public AddFace() : base(SD.Starter + "AddFace", "Face", SD.CopyRight ?? "", SD.PluginTitle, SD.PluginCategory7)
        {
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "", (GH_ParamAccess)0);
            pManager.AddSurfaceParameter("Surface", "S", "3D surface to create the face from", (GH_ParamAccess)0);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "New Brep with the addition", (GH_ParamAccess)0);
            pManager.AddIntegerParameter("Face Index", "Fi", "Face index", (GH_ParamAccess)0);
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep brep = null;
            Surface surface = null;
            DA.GetData<Brep>(0, ref brep);
            DA.GetData<Surface>(1, ref surface);
            if (((brep == null) || (surface == null)) || !surface.IsValid)
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)20, "input bad");
            }
            else
            {
                DA.SetData(1, brep.AddFace(surface));
                DA.SetData(0, brep);
            }
        }
        
        protected override Bitmap Icon =>
            Resources.Sfered_Iconified;
        
        public override Guid ComponentGuid =>
            new Guid("0a3fc80f-9354-471a-9694-32db896d94b9");
    }
}
