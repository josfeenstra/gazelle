// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace SferedApi
{
    using Grasshopper.Kernel;
    using Rhino.Geometry;
    using SferedApi.Properties;
    using System;
    using System.Drawing;
    using System.Runtime.CompilerServices;
    
    public class DeconstructBrepList : GH_Component
    {
        public DeconstructBrepList() : base(SD.Starter + "Deconstruct Brep Lists", "DeBrepLists", SD.CopyRight + "Expose the 5 lists of major topology elements within a brep. Sending the true elements into the output only works with custom parameters.We chose to use a list of indices instead. Data within can be accessed using the Deconstruct [elements] Components\n \n As a layer of abstraction, we chose to combine topology and geometry:\n - Vertex 'holds' the points\n - Edge   'holds' the 3d curve \n - Trim   'holds' the 2d curve\n - Loops  'holds' no geometry\n - Faces  'holds' the surfaces", SD.PluginTitle, SD.PluginCategory7)
        {
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "Brep", 0);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddIntegerParameter("Faces", "Fi", "Face Indices", 1);
            pManager.AddIntegerParameter("Loops", "Li", "Loop Indices", 1);
            pManager.AddIntegerParameter("Trims", "Ti", "Trim Indices", 1);
            pManager.AddIntegerParameter("Edges", "Ei", "Edge Indices", 1);
            pManager.AddIntegerParameter("Vertices", "Vi", "Vertex Indices", 1);
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep brep = null;
            DA.GetData<Brep>(0, ref brep);
            if (brep == null)
            {
                this.AddRuntimeMessage(20, "Input bad");
            }
            else
            {
                DA.SetDataList(0, from item in brep.get_Faces() select item.get_FaceIndex());
                DA.SetDataList(1, from item in brep.get_Loops() select item.get_LoopIndex());
                DA.SetDataList(2, from item in brep.get_Trims() select item.get_TrimIndex());
                DA.SetDataList(3, from item in brep.get_Edges() select item.get_EdgeIndex());
                DA.SetDataList(4, from item in brep.get_Vertices() select item.get_VertexIndex());
            }
        }
        
        protected override Bitmap Icon =>
            Resources.Sfered_Iconified;
        
        public override Guid ComponentGuid =>
            new Guid("cfebde88-6a39-462c-968e-fa3b684b9eaa");
        
        [Serializable, CompilerGenerated]
        private sealed class <>c
        {
            public static readonly DeconstructBrepList.<>c <>9 = new DeconstructBrepList.<>c();
            public static Func<BrepFace, int> <>9__7_0;
            public static Func<BrepLoop, int> <>9__7_1;
            public static Func<BrepTrim, int> <>9__7_2;
            public static Func<BrepEdge, int> <>9__7_3;
            public static Func<BrepVertex, int> <>9__7_4;
            
            internal int <SolveInstance>b__7_0(BrepFace item) => 
                item.get_FaceIndex();
            
            internal int <SolveInstance>b__7_1(BrepLoop item) => 
                item.get_LoopIndex();
            
            internal int <SolveInstance>b__7_2(BrepTrim item) => 
                item.get_TrimIndex();
            
            internal int <SolveInstance>b__7_3(BrepEdge item) => 
                item.get_EdgeIndex();
            
            internal int <SolveInstance>b__7_4(BrepVertex item) => 
                item.get_VertexIndex();
        }
    }
}
