// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace SferedApi
{
    using Grasshopper.Kernel;
    using Rhino.Geometry;
    using SferedApi.Properties;
    using System;
    using System.Drawing;
    
    public class AddLoop : GH_Component
    {
        public AddLoop() : this(SD.Starter + "AddLoop", "Loop", SD.CopyRight ?? "", SD.PluginTitle, SD.PluginCategory7)
        {
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "", 0);
            pManager.AddIntegerParameter("Face Index", "Fi", "Face Index", 0, 0);
            pManager.AddIntegerParameter("BrepLoopType", "T", "Loop Type :  Unknown = 0, Outer = 1, Inner = 2, Slit = 3, CurveOnSurface = 4, PointOnSurface = 5", 0, 0);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddBrepParameter("Brep", "B", "New Brep with the addition", 0);
            pManager.AddIntegerParameter("Loop Index", "Li", "Loop index", 0);
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep brep = null;
            int face = -1;
            int num2 = -1;
            DA.GetData<Brep>(0, ref brep);
            DA.GetData<int>(1, ref face);
            DA.GetData<int>(2, ref num2);
            if (((brep == null) || ((face == -1) || (num2 < 0))) || (num2 > 5))
            {
                this.AddRuntimeMessage(20, "input bad");
            }
            else
            {
                DA.SetData(1, brep.AddLoop(face, (BrepLoopType) num2));
                DA.SetData(0, brep);
            }
        }
        
        protected override Bitmap Icon =>
            Resources.Sfered_Iconified;
        
        public override Guid ComponentGuid =>
            new Guid("dd5365e6-21d1-46b1-8cd7-4896f4954975");
    }
}
