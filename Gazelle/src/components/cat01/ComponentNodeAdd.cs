// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace SferedApi.Components.Node
{
    using Grasshopper.Kernel;
    using Grasshopper.Kernel.Data;
    using Grasshopper.Kernel.Parameters;
    using SferedApi;
    using SferedApi.Datatypes;
    using SferedApi.Properties;
    using System;
    using System.Collections.Generic;
    using System.Drawing;
    
    public class ComponentNodeAdd : GH_Component, IGH_VariableParameterComponent
    {
        public ComponentNodeAdd() : base(SD.Starter + "Node Output Adder", SD.Starter + "Add", SD.CopyRight + "This component is used to add data to an existing Data Node Object. new object with known key will overwrite old objects.", SD.PluginTitle, SD.PluginCategory1)
        {
            base.get_Params().add_ParameterSourcesChanged(new GH_ComponentParamServer.ParameterSourcesChangedEventHandler(this, this.ParamSourcesChanged));
        }
        
        public bool CanInsertParameter(GH_ParameterSide side, int index) => 
            (side == null) && (index != 0);
        
        public bool CanRemoveParameter(GH_ParameterSide side, int index) => 
            (side == null) && (index != 0);
        
        public IGH_Param CreateParameter(GH_ParameterSide side, int index)
        {
            Param_GenericObject obj2 = new Param_GenericObject();
            obj2.set_Access(2);
            obj2.set_NickName(string.Empty);
            obj2.set_MutableNickName(true);
            base.get_Params().RegisterInputParam(obj2, index);
            return obj2;
        }
        
        public bool DestroyParameter(GH_ParameterSide side, int index) => 
            true;
        
        private void ParamSourcesChanged(object sender, GH_ParamServerEventArgs e)
        {
            this.VariableParameterMaintenance();
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            GH_Param_DataNode node = new GH_Param_DataNode();
            pManager.AddParameter(node, "Node input", "N", "Connect this to an Data Node.", 0);
            pManager.get_Param(0).set_Optional(false);
            pManager.get_Param(0).set_MutableNickName(false);
            pManager.AddGenericParameter("data input", "(0)", "add Data Here", 2);
            pManager.AddGenericParameter("data input", "(1)", "add Data Here", 2);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddGenericParameter("Node", "N", "Data Node", 0);
            pManager.get_Param(0).set_Optional(true);
            pManager.get_Param(0).set_MutableNickName(false);
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            GH_DataNode dataNode = new GH_DataNode();
            DA.GetData<GH_DataNode>(0, ref dataNode);
            dataNode = new GH_DataNode(dataNode);
            DataNode node2 = dataNode.get_Value();
            int num = 1;
            while (true)
            {
                if (num >= base.get_Params().get_Input().Count)
                {
                    DA.SetData(0, dataNode);
                    this.VariableParameterMaintenance();
                    return;
                }
                if (base.get_Params().get_Input()[num].get_Sources().Count != 1)
                {
                    this.AddRuntimeMessage(10, "input " + num.ToString() + " needs to have 1 source.");
                }
                else
                {
                    string key = base.get_Params().get_Input()[num].get_Sources()[0].get_NickName();
                    GH_Structure<IGH_Goo> structure = new GH_Structure<IGH_Goo>();
                    DA.GetDataTree<IGH_Goo>(num, ref structure);
                    if (structure.get_Branches().Count != 0)
                    {
                        if (structure.get_Branches().Count != 1)
                        {
                            node2.Add(key, structure);
                        }
                        else
                        {
                            List<IGH_Goo> list = new List<IGH_Goo>();
                            list = structure.get_Branches()[0];
                            if (list.Count != 0)
                            {
                                if (list.Count == 1)
                                {
                                    node2.Add(key, list[0]);
                                }
                                else
                                {
                                    node2.Add(key, list);
                                }
                            }
                        }
                    }
                }
                num++;
            }
        }
        
        public void VariableParameterMaintenance()
        {
            int count = base.get_Params().get_Input().Count;
            int num2 = 1;
            while (true)
            {
                if (num2 >= count)
                {
                    base.get_Params().get_Output()[0].set_NickName(base.get_Params().get_Input()[0].get_NickName());
                    return;
                }
                IGH_Param param = base.get_Params().get_Input()[num2];
                param.set_MutableNickName(false);
                if (param.get_Sources().Count == 1)
                {
                    param.set_NickName(param.get_Sources()[0].get_NickName());
                    param.set_MutableNickName(false);
                }
                num2++;
            }
        }
        
        protected override Bitmap Icon =>
            Resources.NodeMerge;
        
        public override Guid ComponentGuid =>
            new Guid("e8a60b38-d1e9-41e7-989e-43c7553a55ab");
    }
}
