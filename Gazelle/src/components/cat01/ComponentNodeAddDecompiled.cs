// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace SferedApi.Components.Node
{
    using Grasshopper.Kernel;
    using Grasshopper.Kernel.Data;
    using Grasshopper.Kernel.Parameters;
    using Grasshopper.Kernel.Types;
    using SferedApi;
    using SferedApi.Datatypes;
    using SferedApi.Properties;
    using System;
    using System.Collections.Generic;
    using System.Drawing;
    
    public class ComponentNodeAdd : GH_Component, IGH_VariableParameterComponent
    {
        public ComponentNodeAdd() : base(
            SD.Starter + "Node Output Adder", 
            SD.Starter + "Add", 
            SD.CopyRight + "This component is used to add data to an existing Data Node Object. " +
            "new object with known key will overwrite old objects.", 
            SD.PluginTitle, 
            SD.PluginCategory1)
        {
            base.Params.ParameterSourcesChanged += 
        }
        
        public bool CanInsertParameter(GH_ParameterSide side, int index) => 
            (side == null) && (index != 0);
        
        public bool CanRemoveParameter(GH_ParameterSide side, int index) => 
            (side == null) && (index != 0);
        
        public IGH_Param CreateParameter(GH_ParameterSide side, int index)
        {
            Param_GenericObject obj2 = new Param_GenericObject();
            obj2.Access = 2;
            obj2.NickName = string.Empty;
            obj2.MutableNickName = true;
            base.Params.RegisterInputParam(obj2, index);
            return obj2;
        }
        
        public bool DestroyParameter(GH_ParameterSide side, int index) => 
            true;
        
        private void ParamSourcesChanged(object sender, GH_ParamServerEventArgs e)
        {
            this.VariableParameterMaintenance();
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            GH_Param_DataNode node = new GH_Param_DataNode();
            pManager.AddParameter(node, "Node input", "N", "Connect this to an Data Node.", 0);
            pManager[0].Optional = false;
            pManager[0].MutableNickName = false;
            pManager.AddGenericParameter("data input", "(0)", "add Data Here", (GH_ParamAccess) 2);
            pManager.AddGenericParameter("data input", "(1)", "add Data Here", (GH_ParamAccess) 2);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddGenericParameter("Node", "N", "Data Node", 0);
            pManager[0].Optional = true;
            pManager[0].MutableNickName = false;
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            GH_DataNode dataNode = new GH_DataNode();
            DA.GetData<GH_DataNode>(0, ref dataNode);
            dataNode = new GH_DataNode(dataNode);
            DataNode node2 = dataNode.Value;
            int num = 1;
            while (true)
            {
                if (num >= base.Params.Input.Count)
                {
                    DA.SetData(0, dataNode);
                    this.VariableParameterMaintenance();
                    return;
                }
                if (base.Params.Input[num].Sources.Count != 1)
                {
                    this.AddRuntimeMessage(10, "input " + num.ToString() + " needs to have 1 source.");
                }
                else
                {
                    string key = base.Params.Input[num].Sources[0].NickName;
                    GH_Structure<IGH_Goo> structure = new GH_Structure<IGH_Goo>();
                    DA.GetDataTree<IGH_Goo>(num, ref structure);
                    if (structure.Branches.Count != 0)
                    {
                        if (structure.Branches.Count != 1)
                        {
                            node2.Add(key, structure);
                        }
                        else
                        {
                            List<IGH_Goo> list = new List<IGH_Goo>();
                            list = structure.Branches[0];
                            if (list.Count != 0)
                            {
                                if (list.Count == 1)
                                {
                                    node2.Add(key, list[0]);
                                }
                                else
                                {
                                    node2.Add(key, list);
                                }
                            }
                        }
                    }
                }
                num++;
            }
        }
        
        public void VariableParameterMaintenance()
        {
            int count = base.Params.Input.Count;
            int num2 = 1;
            while (true)
            {
                if (num2 >= count)
                {
                    base.Params.Output[0].NickName = base.Params.Input[0].NickName;
                    return;
                }
                IGH_Param param = base.Params.Input[num2];
                param.MutableNickName = false;
                if (param.Sources.Count == 1)
                {
                    param.NickName = param.Sources[0].NickName;
                    param.MutableNickName = false;
                }
                num2++;
            }
        }
        
        protected override Bitmap Icon =>
            Resources.NodeMerge;
        
        public override Guid ComponentGuid =>
            new Guid("e8a60b38-d1e9-41e7-989e-43c7553a55ab");
    }
}
