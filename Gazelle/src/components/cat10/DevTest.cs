// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace SferedApi.Components
{
    using Grasshopper;
    using Grasshopper.Kernel;
    using Grasshopper.Kernel.Data;
    using Grasshopper.Kernel.Parameters;
    using SferedApi;
    using SferedApi.Properties;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.InteropServices;
    
    public class DevTest : GH_Component, IGH_VariableParameterComponent
    {
        public int ButtonState;
        private MethodInfo method;
        
        public DevTest() : base(SD.Starter + "Test", SD.Starter + "Test", SD.CopyRight + "Use reflection to call a static method from a class. Use the nickname to make a method call.", SD.PluginTitle, SD.PluginCategory10)
        {
            this.method = null;
        }
        
        protected override void AfterSolveInstance()
        {
            base.AfterSolveInstance();
        }
        
        public bool CanInsertParameter(GH_ParameterSide side, int index) => 
            false;
        
        public bool CanRemoveParameter(GH_ParameterSide side, int index) => 
            false;
        
        public override void CreateAttributes()
        {
            AttributesButtonGeneral general = new AttributesButtonGeneral(this, "Create", "Create", new Func<bool>(this.OnButtonPress));
            base.m_attributes = general;
        }
        
        public IGH_Param CreateParameter(GH_ParameterSide side, int index)
        {
            Param_GenericObject obj2 = new Param_GenericObject();
            obj2.Access = 2;
            obj2.NickName = index.ToString();
            obj2.MutableNickName = true;
            obj2.Optional = true;
            return obj2;
        }
        
        public IGH_Param CreateParameter(ParameterInfo info, string name)
        {
            Param_GenericObject obj2 = new Param_GenericObject();
            obj2.Name = name;
            obj2.NickName = name;
            obj2.Optional = true;
            Type parameterType = info.ParameterType;
            if (typeof(IEnumerable).IsAssignableFrom(parameterType))
            {
                obj2.Access = 1;
            }
            else
            {
                obj2.Access = 0;
            }
            return obj2;
        }
        
        public void CreateParametersCurrentMethod()
        {
            List<ParameterInfo> list;
            List<ParameterInfo> list2;
            this.GetParamInfos(out list, out list2);
            foreach (ParameterInfo info in list)
            {
                base.Params.RegisterInputParam(this.CreateParameter(info, info.Name));
            }
            int num = 0;
            foreach (ParameterInfo info2 in list2)
            {
                base.Params.RegisterOutputParam(this.CreateParameter(info2, (num == 0) ? "return" : info2.Name));
                num++;
            }
            base.Params.OnParametersChanged();
        }
        
        public bool DestroyParameter(GH_ParameterSide side, int index) => 
            true;
        
        private Type GetClassFromAssembly(string name)
        {
            Type type = (from t in Assembly.GetExecutingAssembly().GetTypes()
                where t.IsClass && (t.Name == name)
                select t).FirstOrDefault<Type>();
            if (type == null)
            {
                throw new Exception("Failure : class not found.");
            }
            return type;
        }
        
        private MethodInfo GetMethodFromClass(Type c, string functionName)
        {
            MethodInfo info = null;
            foreach (MethodInfo info2 in c.GetMethods(BindingFlags.Public | BindingFlags.Static))
            {
                if (info2.Name == functionName)
                {
                    info = info2;
                }
            }
            if (info == null)
            {
                throw new Exception("Failure : method not found.");
            }
            return info;
        }
        
        private void GetNames(out string functionName, out string className)
        {
            string str = this.NickName;
            if (str == "")
            {
                str = this.Name;
            }
            int index = str.IndexOf(".");
            if (index == -1)
            {
                throw new Exception("no correct separator found...");
            }
            className = str.Substring(0, index);
            functionName = str.Substring(index, str.Length - index).Replace(";", "").Replace("(", "").Replace(".", "").Replace(")", "");
        }
        
        private void GetParamInfos(out List<ParameterInfo> i, out List<ParameterInfo> o)
        {
            i = new List<ParameterInfo>();
            o = new List<ParameterInfo>();
            if (this.method.ReturnType != typeof(void))
            {
                o.Add(this.method.ReturnParameter);
            }
            else
            {
                o.Add(null);
            }
            foreach (ParameterInfo info in this.method.GetParameters())
            {
                if (info.IsOut)
                {
                    o.Add(info);
                }
                else
                {
                    i.Add(info);
                }
            }
        }
        
        public void LoadMethod()
        {
            string str;
            string str2;
            this.GetNames(out str, out str2);
            string[] textArray1 = new string[] { "trying to call ", str, " from ", str2, " ..." };
            this.print(string.Concat(textArray1));
            Type classFromAssembly = this.GetClassFromAssembly(str2);
            this.print("found a class! : " + classFromAssembly.Name);
            MethodInfo methodFromClass = this.GetMethodFromClass(classFromAssembly, str);
            this.print("found a method! : " + methodFromClass.Name);
            this.method = methodFromClass;
            this.Name = this.NickName;
            base.Message = this.NickName;
        }
        
        private object LoadOutputParameter(ParameterInfo p)
        {
            object obj2;
            Type parameterType = p.ParameterType;
            if (parameterType.HasElementType && (parameterType is IGH_DataTree))
            {
                Type elementType = parameterType.GetElementType();
                obj2 = new GH_Structure<IGH_Goo>();
            }
            else if (!parameterType.HasElementType)
            {
                obj2 = null;
            }
            else
            {
                Type elementType = parameterType.GetElementType();
                obj2 = new List<object>();
            }
            return obj2;
        }
        
        private object LoadParameter(ParameterInfo p, int index, IGH_DataAccess DA)
        {
            object obj2;
            Type parameterType = p.ParameterType;
            if (parameterType.HasElementType && (parameterType is IGH_DataTree))
            {
                Type elementType = parameterType.GetElementType();
                GH_Structure<IGH_Goo> structure = new GH_Structure<IGH_Goo>();
                DA.GetDataTree<IGH_Goo>(index, ref structure);
                obj2 = structure;
            }
            else if (typeof(IEnumerable<bool>).IsAssignableFrom(parameterType))
            {
                Type elementType = parameterType.GetElementType();
                List<bool> list = new List<bool>();
                DA.GetDataList<bool>(index, list);
                obj2 = list;
            }
            else if (typeof(IEnumerable<int>).IsAssignableFrom(parameterType))
            {
                Type elementType = parameterType.GetElementType();
                List<int> list2 = new List<int>();
                DA.GetDataList<int>(index, list2);
                obj2 = list2;
            }
            else if (typeof(IEnumerable<double>).IsAssignableFrom(parameterType))
            {
                Type elementType = parameterType.GetElementType();
                List<double> list3 = new List<double>();
                DA.GetDataList<double>(index, list3);
                obj2 = list3;
            }
            else if (!typeof(IEnumerable<object>).IsAssignableFrom(parameterType))
            {
                object goo = null;
                DA.GetData<object>(index, ref goo);
                obj2 = GrasshopperFunctions.ValueFromGoo(goo);
            }
            else
            {
                Type elementType = parameterType.GetElementType();
                List<object> list4 = new List<object>();
                DA.GetDataList<object>(index, list4);
                obj2 = list4;
            }
            return obj2;
        }
        
        public bool OnButtonPress()
        {
            this.RemoveAllParams();
            this.LoadMethod();
            this.CreateParametersCurrentMethod();
            this.ExpireSolution(true);
            return false;
        }
        
        private void ParamChanged(object sender, GH_ParamServerEventArgs e)
        {
            this.VariableParameterMaintenance();
        }
        
        private void print(string message)
        {
            this.AddRuntimeMessage(0xff, message);
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
        }
        
        public void RemoveAllParams()
        {
            int num = base.Params.Input.Count - 1;
            while (true)
            {
                if (num <= -1)
                {
                    int num2 = base.Params.Output.Count - 1;
                    while (true)
                    {
                        if (num2 <= -1)
                        {
                            base.Params.OnParametersChanged();
                            return;
                        }
                        base.Params.UnregisterOutputParameter(base.Params.Output[num2]);
                        num2--;
                    }
                }
                base.Params.UnregisterInputParameter(base.Params.Input[num]);
                num--;
            }
        }
        
        private void SaveParameter(ParameterInfo p, int index, object data, IGH_DataAccess DA)
        {
            if (!object.ReferenceEquals(p, null))
            {
                Type parameterType = p.ParameterType;
                this.print($"data of type {data.GetType()} == ienumberable : {data is IEnumerable<object>}");
                if (parameterType.HasElementType && (parameterType is IGH_DataTree))
                {
                    DataTree<object> tree = GrasshopperFunctions.ToTree<object>(data as IEnumerable<IEnumerable<object>>);
                    DA.SetDataTree(index, tree);
                }
                else if (data is IEnumerable<object>)
                {
                    DA.SetDataList(index, data as IEnumerable<object>);
                }
                else if (data is IEnumerable<double>)
                {
                    DA.SetDataList(index, data as IEnumerable<double>);
                }
                else if (data is IEnumerable<int>)
                {
                    DA.SetDataList(index, data as IEnumerable<int>);
                }
                else if (data is IEnumerable<bool>)
                {
                    DA.SetDataList(index, data as IEnumerable<bool>);
                }
                else if (data is IEnumerable<float>)
                {
                    DA.SetDataList(index, data as IEnumerable<float>);
                }
                else
                {
                    DA.SetData(index, data);
                }
            }
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            List<ParameterInfo> list;
            List<ParameterInfo> list2;
            if (this.method == null)
            {
                this.LoadMethod();
            }
            this.GetParamInfos(out list, out list2);
            this.print("loading...");
            List<object> list3 = new List<object>();
            int index = 0;
            while (true)
            {
                if (index >= list.Count)
                {
                    int num2 = 1;
                    while (true)
                    {
                        if (num2 >= list2.Count)
                        {
                            this.print("invoking...");
                            object data = this.method.Invoke(null, list3.ToArray());
                            this.print("saving...");
                            for (int i = 0; i < list2.Count; i++)
                            {
                                if (i == 0)
                                {
                                    this.SaveParameter(list2[i], i, data, DA);
                                }
                                else
                                {
                                    this.SaveParameter(list2[i], i, list3[list.Count + i], DA);
                                }
                            }
                            return;
                        }
                        list3.Add(this.LoadOutputParameter(list2[num2]));
                        num2++;
                    }
                }
                list3.Add(this.LoadParameter(list[index], index, DA));
                index++;
            }
        }
        
        public void VariableParameterMaintenance()
        {
        }
        
        protected override Bitmap Icon =>
            Resources.info;
        
        public override Guid ComponentGuid =>
            new Guid("CD0935E1-41C5-4AC4-A6DB-507FE3A7D8BF");
    }
}
