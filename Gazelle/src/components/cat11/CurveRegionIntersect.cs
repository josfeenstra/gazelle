// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace Gazelle.Components.CurveAdvanced
{
    using Grasshopper.Kernel;
    using Rhino.Geometry;
    using Gazelle;
    using Gazelle.Properties;
    using System;
    using System.Drawing;
    
    public class CurveRegionIntersect : GH_Component
    {
        public CurveRegionIntersect() : base(SD.Starter + "AddEdge", SD.Starter + "Edge", SD.CopyRight ?? "", SD.PluginTitle, SD.PluginCategory11)
        {
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddCurveParameter("Curve1", "C", "curve 1", (GH_ParamAccess)0);
            pManager.AddCurveParameter("Curve2", "C", "curve 2", (GH_ParamAccess)0);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            Brep brep = null;
            Curve curve = null;
            int vertexFrom = -1;
            int vertexTo = -1;
            DA.GetData<Brep>(0, ref brep);
            DA.GetData<Curve>(1, ref curve);
            DA.GetData<int>(2, ref vertexFrom);
            DA.GetData<int>(3, ref vertexTo);
            if (((brep == null) || ((curve == null) || (!curve.IsValid || (vertexFrom == -1)))) || (vertexTo == -1))
            {
                this.AddRuntimeMessage((GH_RuntimeMessageLevel)20, "input bad");
            }
            else
            {
                DA.SetData(1, brep.AddEdge(curve, vertexFrom, vertexTo));
                DA.SetData(0, brep);
            }
        }
        
        protected override Bitmap Icon =>
            Resources.Sfered_Iconified;
        
        public override Guid ComponentGuid =>
            new Guid("2ff194c2-25ce-4828-8102-d8d8af5cbb60");
    }
}
