// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
using Grasshopper.Kernel;
using Rhino.Geometry;
using SferedApi.Properties;
using System;
using System.Collections.Generic;
using System.Drawing;

namespace SferedApi.Components
{  
    public class SplineSurface : GH_Component
    {
        public SplineSurface() : base(SD.Starter + "Spline Surface", SD.Starter + "SS", SD.CopyRight + "Creates a loft surface per 4 curves, with a 3rd degree basic spline as cross section. " + SD.PluginCategory6Description, SD.PluginTitle, SD.PluginCategory6)
        {
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddCurveParameter("Curves", "C", "Curves for the surface. A surface is made per 4 curves. The last curve of the previous set is the start of the next surface", (GH_ParamAccess)1);
            pManager.AddBooleanParameter("Boolean Closed", "Cl", "If Closed, make sure the last curve connects with the first", (GH_ParamAccess)0, false);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddSurfaceParameter("Surface", "S", "Resulting Surfaces", (GH_ParamAccess)1);
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            List<Curve> list = new List<Curve>();
            bool flag = false;
            DA.GetDataList<Curve>(0, list);
            DA.GetData<bool>(1, ref flag);
            List<Brep> list2 = new List<Brep>();
            if (flag)
            {
                list.Add(list[0]);
            }
            int num = 0;
            while (true)
            {
                if (num >= (list.Count - 3))
                {
                    DA.SetDataList(0, list2);
                    return;
                }
                Curve[] curveArray1 = new Curve[] { list[num], list[num + 1], list[num + 2], list[num + 3] };
                list2.AddRange(Brep.CreateFromLoft(curveArray1, Point3d.Unset, Point3d.Unset, LoftType.Loose, false));
                num += 3;
            }
        }
        
        protected override Bitmap Icon =>
            Resources.Image1;
        
        public override Guid ComponentGuid =>
            new Guid("a3031074-8653-4ba6-9c7b-982907c0413d");
    }
}
