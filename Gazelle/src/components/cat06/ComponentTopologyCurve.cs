// Generated by .NET Reflector from D:\Sfered\Gazelle\Remnants\SferedApi_brep_manipulation.dll
namespace SferedApi.Components.Topology
{
    using Grasshopper.Kernel;
    using Rhino.Geometry;
    using SferedApi.Properties;
    using System;
    using System.Collections.Generic;
    using System.Drawing;
    
    public class ComponentTopologyCurve : GH_Component
    {
        public ComponentTopologyCurve() : base(SD.Starter + "Spline Curve", SD.Starter + "SC", SD.CopyRight + "Creates a 3rd degree basic-spline per 4 points." + SD.PluginCategory6Description, SD.PluginTitle, SD.PluginCategory6)
        {
        }
        
        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            pManager.AddPointParameter("Points", "P", "Points for the curve. A b-spline is made per 4 curves. The last point of the previous set is the start of the next curve", 1);
            pManager.AddBooleanParameter("Boolean Closed", "Cl", "If Closed, make sure the last point connects with the first", 0, false);
        }
        
        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            pManager.AddCurveParameter("curve", "C", "The resulting curves", 1);
        }
        
        protected override void SolveInstance(IGH_DataAccess DA)
        {
            List<Point3d> list = new List<Point3d>();
            bool flag = false;
            DA.GetDataList<Point3d>(0, list);
            DA.GetData<bool>(1, ref flag);
            List<Curve> list2 = new List<Curve>();
            if (flag)
            {
                list.Add(list[0]);
            }
            int num = 0;
            while (true)
            {
                if (num >= (list.Count - 3))
                {
                    DA.SetDataList(0, list2);
                    return;
                }
                Point3d[] pointdArray1 = new Point3d[] { list[num], list[num + 1], list[num + 2], list[num + 3] };
                list2.Add(NurbsCurve.Create(false, 3, pointdArray1));
                num += 3;
            }
        }
        
        protected override Bitmap Icon =>
            Resources.TopoCurve;
        
        public override Guid ComponentGuid =>
            new Guid("49ad8f5b-643e-4dd6-9fbf-4d081c68ce01");
    }
}
